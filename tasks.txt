- achievements / daily /weekly controllers update - to listen for events

---- PAGES ----

1. TODAY PAGE

UX/REACT
- Level Reward Component 
  -data: current level, xp, next_level_reward
- Rewards Milestones (reset time component (datastamp))
  - data: rewards per objective, isRewardClaimed, isRewardReady
  - api: claimObjectiveCounter() 
- Objectives Components
  - data(graphql): objective, data(user_objectives): isReady, lastCollected, isCollected
  - api: claimObjective
- ?? OTHER COMPONENTS TODO: (continue learning->, last collected, last seen...)
#t => require timefix date modification
#r => require reset timestamps??? 
BACKEND APIS
  #t: claimObjectiveCounter (type, number) 
    ? data: update user_rewards_milestones JSON
    ? service: gain reward
    - return: refetch user, notification: REWARD_GAINED (RewardModal), data: Reward type + amount

  #r: claimObjective (id)
    ? data: update user_objectives JSON
    ? service: gain reward
    - return: refetch user, notification: REWARD_GAINED (RewardModal), data: Reward type + amount

2. LEVEL-REWARDS PAGE
  UX/REACT  
  - Free Tier Tower & Premium Tier Tower
  - data: user_level_tower JSON: forEach Row => claimed, readyToClaim, global: isPremium, user_level
  - api: claimLevelReward(level, isPremium)

  BACKEND APIS
  - claimLevelReward (level, isPremium)
    ? data: update user_level_tower JSON
    ? service: gainReward
    - return: refetch user, notification: REWARD_GAINED (RewardModal), data: Reward type + amount

3. SHOP PAGE
  UX/REACT 
  - Subscription Component
    - data: (gql: subscription data), user: isPremium
    - api: *PaymentModal => purchaseProductApi(id, type, paymentSystem)
  - Bundle Component
    - data: gql: bundleData, user: purchasedProducts?
    - api: *PaymentModal => purchaseProductApi(id, type, paymentSystem)
  - Loot Box Component
    - data: userBoxes -> box + quantity/each
    - api: *LootBox Modal => openLootBoxApi(id) / purchaseLootBoxApi(id)
  - Gems Component 
    - data: gql: gems,
    - api: *PaymentsModal => purchaseProductApi(id, type, paymentSystem)
  - Share Friend Gems Component
    - data: gql: data, user: sharedLinks/maxLimit 
    - api: generateShareLink(user_id) / user.link -> / Share Button Native or Link give?
  - Expansion Component 
    (view more) -> Modal Expansion View
    - data: gql: expansion data, user.expansions
    - api: purchaseExpansion(id)

  BACKEND APIS
    - purchaseProductApi(id, type, paymentSystem)
      - data: PaymentProviderApi sync, new Order create, update User-relations with products
      - service: gainReward/updateUser
      - return: refetch_user, notification: PURCHASE_SUCCESS, REWARD_GAIN
    - openLootBoxApi(id) 
      - data: update user-cards
      - service: openPack()
      - return: data: cards, notification: LOOT_BOX_OPEN
    - purchaseLootBoxApi(id)
      - data: add + 1 lootbox to user_boxes
      - return: notification REWARDS_MODAL
    - generateShareLink()
      - data: update user.link with new link
      - return: data: link, notification: SHARE_LINK modal?
    - purchaseExpansion(id)
     - data: update user-expansions 
     - return: notification EXPANSION_UNLOCKED

4. LEARN PAGE / REALMS
    - data: realm.progress (user) merge with gql data
  SINGLE REALM PAGE
    - --
  UX/REACT 
    CARD PAGE
      - data: gql: card + user_card (id) + user_data: expansions, card copies, shares, streak...(lock requirements)
      - api: updateUserCard(id, action) / upgrade, makeNew, complete, completeAction(id)*NEW
    SLIDES
      - data: gql: card.slides, 
      - api: completeCard -> ModalRewards + Feedback Slides/ submitFeedbackApi()*NEW (after a win: like rewards :P)

  BACKEND APIS
      - unlockCard(id)* NEW -> when you have x10 copies of a card: unlock it (call to action ready)
        - data: mark card unlocked, reduce copies of card
        - service updateUserCard() 
        - return: cta Play ready, notification: CARD_UNLOCKED -> maybe trigger Modal with aniamtion as merging cards and congratualtions!
      - startLearning(id)* NEW -> Spend energy to open a card for learning: add to DailyOpen array, next 24h you can open them learn them
        - data: reduce energy, add card to Daily Open, -> in Today show Started cards (but not finished as continue learning ->?)
        - service: updateUser() -> -energy, + dailyStarted[], updateUserCard() -> - quantity + isOpen: true 
        - return: no data, if success: notification: TRIGGER_REDIRECT -> to slides player
      - updateUserCard(id, action)
        - data: completed
        - service: completed
        - return: new: notification CARD_UPDATED_ACTION 
      - completeAction(id)* NEW -> Mark individual action as complete, think about data structure*
        - data: mark action as complete/uncomplete? (JSON in user-card relation?)
        - service: updateUserCard(id), ??* think here-> if all actions must be complete before unlocking level 2?
        - return: data: isCompleted, notification: 0, but if all actions are complete
          but if it's last one completed => notification: UNLOCK LEVEL 2 OF CARD (but need upgraded to play? think this)
          also think about active actions where they go? but not finished?
      - resetProgress(card_id)? maybe as feature? just reset JSON to isCompleteFalses?
        maybe feature

5.  PROFILE PAGE 
    UX/REACT
    BACKEND APIS
    - claimStreakReward (controller/api)
    - generateBuddyShareLink (controller -> save link to database?)
    - claimFriendReward (service -> called when friend creates account)
    - addFriend/FollowUser() -> add to followers

    - daily login click -> increase streak
    - Validate Account Create Reward Gems/card + Limit
    - Login with OAUTH
    - social rewards? fb like page etc...?

    - lootbox premium logic to guarantee new?
    - lootbox logic to check if you have max quantitiy of card (including level + copies) -> disenchant to stars? (automatic)

    - unlock card with gems? (without copies required?)
    - images with colo scheme byt realm + type art like uniheroes (habit + health = 1 art...)